"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { usePuzzle } from "@/lib/puzzle-context"
import { Info, BookOpen, Sparkles } from "lucide-react"
import Link from "next/link"

interface UnifiedSection {
  id: string
  title: string
  description: string
  detailedExplanation: string
  position: "top-left" | "top-right" | "bottom-left" | "bottom-right"
  color: string
  bgColor: string
  icon: string
  blogId: string
  keyPoints: string[]
}

export function UnifiedPicture() {
  const { isAllUnlocked } = usePuzzle()
  const [hoveredSection, setHoveredSection] = useState<string | null>(null)

  const sections: UnifiedSection[] = [
    {
      id: "theory",
      title: "N·ªÅn T·∫£ng L√Ω Lu·∫≠n",
      description: "Ch·ªß nghƒ©a duy v·∫≠t bi·ªán ch·ª©ng v√† duy v·∫≠t l·ªãch s·ª≠ t·∫°o n·ªÅn t·∫£ng khoa h·ªçc v·ªØng ch·∫Øc",
      detailedExplanation:
        "N·ªÅn t·∫£ng l√Ω lu·∫≠n c·ªßa ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n hai tr·ª• c·ªôt ch√≠nh: ch·ªß nghƒ©a duy v·∫≠t bi·ªán ch·ª©ng v√† ch·ªß nghƒ©a duy v·∫≠t l·ªãch s·ª≠. ƒê√¢y l√† c∆° s·ªü khoa h·ªçc gi√∫p ch√∫ng ta hi·ªÉu ƒë∆∞·ª£c quy lu·∫≠t ph√°t tri·ªÉn c·ªßa t·ª± nhi√™n, x√£ h·ªôi v√† t∆∞ duy.",
      position: "top-left",
      color: "text-blue-900",
      bgColor: "bg-blue-600",
      icon: "üìö",
      blogId: "foundations",
      keyPoints: [
        "Ch·ªß nghƒ©a duy v·∫≠t bi·ªán ch·ª©ng",
        "Ch·ªß nghƒ©a duy v·∫≠t l·ªãch s·ª≠",
        "Quy lu·∫≠t ph√°t tri·ªÉn x√£ h·ªôi",
        "Ph∆∞∆°ng ph√°p lu·∫≠n khoa h·ªçc",
      ],
    },
    {
      id: "struggle",
      title: "ƒê·∫•u Tranh Giai C·∫•p",
      description: "ƒê·ªông l·ª±c th√∫c ƒë·∫©y s·ª± ph√°t tri·ªÉn x√£ h·ªôi v√† ti·∫øn b·ªô l·ªãch s·ª≠",
      detailedExplanation:
        "ƒê·∫•u tranh giai c·∫•p l√† ƒë·ªông l·ª±c c∆° b·∫£n c·ªßa s·ª± ph√°t tri·ªÉn x√£ h·ªôi. Giai c·∫•p c√¥ng nh√¢n, v·ªõi vai tr√≤ ti√™n phong, c√≥ s·ª© m·ªánh l·ªãch s·ª≠ l√£nh ƒë·∫°o c√°ch m·∫°ng x√£ h·ªôi ch·ªß nghƒ©a ƒë·ªÉ x√≥a b·ªè ch·∫ø ƒë·ªô b√≥c l·ªôt v√† x√¢y d·ª±ng x√£ h·ªôi c√¥ng b·∫±ng.",
      position: "top-right",
      color: "text-red-900",
      bgColor: "bg-red-600",
      icon: "‚úä",
      blogId: "class-struggle",
      keyPoints: [
        "M√¢u thu·∫´n giai c·∫•p",
        "Vai tr√≤ giai c·∫•p c√¥ng nh√¢n",
        "C√°ch m·∫°ng x√£ h·ªôi ch·ªß nghƒ©a",
        "X√≥a b·ªè ch·∫ø ƒë·ªô b√≥c l·ªôt",
      ],
    },
    {
      id: "unity",
      title: "ƒêo√†n K·∫øt Th·ªëng Nh·∫•t",
      description: "S·ª©c m·∫°nh c·ªßa s·ª± ƒëo√†n k·∫øt qu·ªëc t·∫ø v√† th·ªëng nh·∫•t trong ƒë·∫£ng",
      detailedExplanation:
        "ƒêo√†n k·∫øt qu·ªëc t·∫ø c·ªßa giai c·∫•p c√¥ng nh√¢n v√† s·ª± th·ªëng nh·∫•t trong ƒë·∫£ng c·ªông s·∫£n l√† s·ª©c m·∫°nh to l·ªõn. Kh·∫©u hi·ªáu 'To√†n th·∫ø gi·ªõi v√¥ s·∫£n, h√£y ƒëo√†n k·∫øt l·∫°i!' th·ªÉ hi·ªán tinh th·∫ßn t∆∞∆°ng tr·ª£ v√† li√™n minh trong ƒë·∫•u tranh chung.",
      position: "bottom-left",
      color: "text-purple-900",
      bgColor: "bg-purple-600",
      icon: "ü§ù",
      blogId: "unity-solidarity",
      keyPoints: ["ƒêo√†n k·∫øt qu·ªëc t·∫ø", "Th·ªëng nh·∫•t trong ƒë·∫£ng", "Li√™n minh giai c·∫•p", "M·∫∑t tr·∫≠n th·ªëng nh·∫•t"],
    },
    {
      id: "application",
      title: "V·∫≠n D·ª•ng S√°ng T·∫°o",
      description: "√Åp d·ª•ng linh ho·∫°t v√†o ƒëi·ªÅu ki·ªán c·ª• th·ªÉ c·ªßa t·ª´ng qu·ªëc gia",
      detailedExplanation:
        "Ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc kh√¥ng ph·∫£i l√† gi√°o ƒëi·ªÅu c·ª©ng nh·∫Øc m√† c·∫ßn ƒë∆∞·ª£c v·∫≠n d·ª•ng s√°ng t·∫°o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán l·ªãch s·ª≠, vƒÉn h√≥a v√† x√£ h·ªôi c·ª• th·ªÉ c·ªßa t·ª´ng qu·ªëc gia. Vi·ªát Nam l√† m·ªôt v√≠ d·ª• ƒëi·ªÉn h√¨nh v·ªÅ s·ª± v·∫≠n d·ª•ng th√†nh c√¥ng n√†y.",
      position: "bottom-right",
      color: "text-green-900",
      bgColor: "bg-green-600",
      icon: "üåç",
      blogId: "global-application",
      keyPoints: ["V·∫≠n d·ª•ng s√°ng t·∫°o", "ƒêi·ªÅu ki·ªán c·ª• th·ªÉ", "Kinh nghi·ªám qu·ªëc t·∫ø", "M√¥ h√¨nh Vi·ªát Nam"],
    },
  ]

  const hoveredSectionData = sections.find((s) => s.id === hoveredSection)

  return (
    <div className="relative">
      <Card className={`transition-all duration-500 ${isAllUnlocked ? "puzzle-merge" : ""}`}>
        <CardContent className="p-6">
          {!isAllUnlocked ? (
            <div className="aspect-square bg-muted rounded-lg flex items-center justify-center">
              <div className="text-center">
                <div className="text-6xl mb-4">üîí</div>
                <h3 className="text-lg font-semibold mb-2">B·ª©c Tranh T·ªïng Th·ªÉ</h3>
                <p className="text-muted-foreground mb-4">
                  M·ªü kh√≥a t·∫•t c·∫£ 4 m·∫£nh gh√©p ƒë·ªÉ xem b·ª©c tranh t·ªïng th·ªÉ v·ªÅ ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc
                </p>
                <Badge variant="outline">C·∫ßn ho√†n th√†nh puzzle</Badge>
              </div>
            </div>
          ) : (
            <div className="space-y-4">
              <div className="text-center mb-4">
                <Badge className="bg-gradient-to-r from-blue-600 to-purple-600 text-white gap-1">
                  <Sparkles className="h-3 w-3" />
                  B·ª©c Tranh T·ªïng Th·ªÉ ƒê√£ Ho√†n Th√†nh
                </Badge>
              </div>

              <div className="relative aspect-square bg-gradient-to-br from-blue-50 via-purple-50 to-green-50 rounded-lg overflow-hidden border-2 border-gradient-to-r from-blue-200 to-purple-200">
                {/* Central Unity Symbol */}
                <div className="absolute inset-0 flex items-center justify-center z-10">
                  <div className="w-24 h-24 bg-white rounded-full shadow-xl flex items-center justify-center border-4 border-yellow-400">
                    <div className="text-3xl animate-pulse">‚ö°</div>
                  </div>
                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-32 h-32 border-2 border-dashed border-yellow-400 rounded-full animate-spin" />
                </div>

                {/* Four Sections */}
                {sections.map((section) => (
                  <div
                    key={section.id}
                    className={`absolute w-1/2 h-1/2 ${
                      section.position === "top-left"
                        ? "top-0 left-0 rounded-tl-lg"
                        : section.position === "top-right"
                          ? "top-0 right-0 rounded-tr-lg"
                          : section.position === "bottom-left"
                            ? "bottom-0 left-0 rounded-bl-lg"
                            : "bottom-0 right-0 rounded-br-lg"
                    } cursor-pointer transition-all duration-300 hover:scale-105 hover:z-20 group`}
                    onMouseEnter={() => setHoveredSection(section.id)}
                    onMouseLeave={() => setHoveredSection(null)}
                  >
                    <div
                      className={`w-full h-full ${section.bgColor} opacity-20 group-hover:opacity-40 transition-all duration-300`}
                    />
                    <div className="absolute inset-4 flex flex-col items-center justify-center text-center">
                      <div className="text-3xl mb-2 group-hover:scale-110 transition-transform duration-300">
                        {section.icon}
                      </div>
                      <h3 className={`font-bold text-sm ${section.color} group-hover:scale-105 transition-transform`}>
                        {section.title}
                      </h3>
                      <div className="w-8 h-0.5 bg-current opacity-50 mt-1 group-hover:w-12 transition-all duration-300" />
                    </div>
                  </div>
                ))}

                {/* Connecting Lines */}
                <svg className="absolute inset-0 w-full h-full pointer-events-none" style={{ zIndex: 5 }}>
                  <defs>
                    <linearGradient id="lineGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                      <stop offset="0%" stopColor="#3b82f6" stopOpacity="0.3" />
                      <stop offset="50%" stopColor="#8b5cf6" stopOpacity="0.3" />
                      <stop offset="100%" stopColor="#10b981" stopOpacity="0.3" />
                    </linearGradient>
                  </defs>
                  <line x1="25%" y1="25%" x2="75%" y2="25%" stroke="url(#lineGradient)" strokeWidth="2" />
                  <line x1="25%" y1="75%" x2="75%" y2="75%" stroke="url(#lineGradient)" strokeWidth="2" />
                  <line x1="25%" y1="25%" x2="25%" y2="75%" stroke="url(#lineGradient)" strokeWidth="2" />
                  <line x1="75%" y1="25%" x2="75%" y2="75%" stroke="url(#lineGradient)" strokeWidth="2" />
                </svg>
              </div>

              <p className="text-sm text-muted-foreground text-center">
                Di chu·ªôt qua c√°c v√πng ƒë·ªÉ xem √Ω nghƒ©a chi ti·∫øt c·ªßa t·ª´ng ph·∫ßn
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Detailed Hover Card */}
      {hoveredSectionData && isAllUnlocked && (
        <Card className="absolute top-full left-0 right-0 mt-4 z-30 bg-white/95 backdrop-blur-sm border-2 shadow-xl">
          <CardContent className="p-6">
            <div className="flex items-start gap-4">
              <div className="text-4xl">{hoveredSectionData.icon}</div>
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-3">
                  <h4 className="text-xl font-bold text-primary">{hoveredSectionData.title}</h4>
                  <Badge className={`${hoveredSectionData.bgColor} text-white`}>
                    M·∫£nh {sections.indexOf(hoveredSectionData) + 1}
                  </Badge>
                </div>

                <p className="text-muted-foreground mb-4 leading-relaxed">{hoveredSectionData.detailedExplanation}</p>

                <div className="grid md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <h5 className="font-semibold text-sm mb-2 flex items-center gap-1">
                      <Info className="h-4 w-4" />
                      ƒêi·ªÉm ch√≠nh:
                    </h5>
                    <ul className="space-y-1">
                      {hoveredSectionData.keyPoints.map((point, index) => (
                        <li key={index} className="text-sm text-muted-foreground flex items-center gap-2">
                          <div className="w-1.5 h-1.5 bg-primary rounded-full" />
                          {point}
                        </li>
                      ))}
                    </ul>
                  </div>

                  <div className="flex flex-col justify-end">
                    <Link href={`/blog/${hoveredSectionData.blogId}`}>
                      <Button className="w-full gap-2">
                        <BookOpen className="h-4 w-4" />
                        ƒê·ªçc b√†i vi·∫øt chi ti·∫øt
                      </Button>
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
