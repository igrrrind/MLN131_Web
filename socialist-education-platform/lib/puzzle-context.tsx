"use client";

import type React from "react";
import { createContext, useContext, useEffect, useState } from "react";
import type { PuzzlePiece, UserProgress, Achievement } from "./types";
import { questionsData } from "./data/questions";

interface PuzzleContextType {
  pieces: PuzzlePiece[];
  userProgress: UserProgress;
  unlockPiece: (pieceId: number) => void;
  toggleCheatMode: () => void;
  resetProgress: () => void;
  isAllUnlocked: boolean;
  trackQuestionAnswer: (isCorrect: boolean) => void;
  sessionStartTime: Date | null;
}

const PuzzleContext = createContext<PuzzleContextType | undefined>(undefined);

const initialPieces: PuzzlePiece[] = [
  {
    id: 1,
    title: "M·∫£nh Gh√©p Ch·ªß ƒê·ªÅ CQ1. N·ªÅn s·∫£n xu·∫•t Vi·ªát Nam trong th·ªùi k·ª≥ qu√° ƒë·ªô l√™n CNXH d∆∞·ªõi t√°c ƒë·ªông c·ªßa C√°ch m·∫°ng c√¥ng nghi·ªáp 4.0‚Äù.",
    description:
      "Trong cu·ªën G√≥p ph·∫ßn ph√™ ph√°n khoa kinh t·∫ø ch√≠nh tr·ªã h·ªçc. C. M√°c nh·∫•n m·∫°nh: ‚ÄúC√°i c·ªëi quay b·∫±ng tay ƒë∆∞a l·∫°i x√£ h·ªôi c√≥ l√£nh ch√∫a; c√°i c·ªëi xay ch·∫°y b·∫±ng h∆°i n∆∞·ªõc ƒë∆∞a l·∫°i x√£ h·ªôi c√≥ nh√† t∆∞ b·∫£n c√¥ng nghi·ªáp.‚Äù ƒê·∫∑t v√†o trong ƒëi·ªÅu ki·ªán c·ªßa cu·ªôc c√°ch m·∫°ng c√¥ng nghi·ªáp 4.0 h√£y ph√°c th·∫£o ra n·ªÅn s·∫£n xu·∫•t ·ªü Vi·ªát Nam trong th·ªùi k·ª≥ qu√° ƒë·ªô l√™n ch·ªß nghƒ©a x√£ h·ªôi (ƒë·ªÉ lu·∫≠n ch·ª©ng r·∫±ng n√≥ ƒë·∫∑t ti·ªÅn ƒë·ªÅ ti·∫øn l√™n m·ªôt x√£ h·ªôi ∆∞u vi·ªát.).",
    color: "knowledge-blue",
    unlocked: false,
    questions: questionsData[1],
    blogId: "cq-1",
  },
  {
    id: 2,
    title: "M·∫£nh Gh√©p Ch·ªß ƒê·ªÅ CQ2. T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v√† th·ª±c tr·∫°ng thanh ni√™n trong x√¢y d·ª±ng con ng∆∞·ªùi XHCN",
    description:
      "T·∫°i ƒê·∫°i h·ªôi ƒê·∫£ng b·ªô th√†nh ph·ªë H√† N·ªôi, ng√†y 20 th√°ng 6 nƒÉm 1960, Ch·ªß t·ªãch H·ªì Ch√≠ Minh nh·∫•n m·∫°nh: ‚ÄúMu·ªën x√¢y d·ª±ng ch·ªß nghƒ©a x√£ h·ªôi, ph·∫£i c√≥ con ng∆∞·ªùi x√£ h·ªôi ch·ªß nghƒ©a v√† c√≥ t∆∞ t∆∞·ªüng x√£ h·ªôi ch·ªß nghƒ©a‚Äù. 1. ƒê·∫∑t m√¨nh v√†o v·ªã th·∫ø l√† ch·ªß nh√¢n t∆∞∆°ng lai c·ªßa ƒë·∫•t n∆∞·ªõc h√£y lu·∫≠n b√†n v·ªÅ ph∆∞∆°ng di·ªán con ng∆∞·ªùi m·ªõi x√£ h·ªôi ch·ªß nghƒ©a. 2. Nh·∫≠n di·ªán nh·ªØng l·ªách chu·∫©n trong suy nghƒ© v√† h√†nh ƒë·ªông c·ªßa gi·ªõi tr·∫ª hi·ªán nay trong h·ªçc t·∫≠p v√† lao ƒë·ªông.",
    color: "revolution-red",
    unlocked: false,
    questions: questionsData[2],
    blogId: "cq-2",
  },
  {
    id: 3,
    title: "M·∫£nh Gh√©p Ch·ªß ƒê·ªÅ CQ3. B·∫£n ch·∫•t l·ªãch s·ª≠ v√† s·ª± k·∫ø th·ª´a ph√°t tri·ªÉn c·ªßa d√¢n ch·ªß trong ti·∫øn tr√¨nh x√£ h·ªôi",
    description:
      "V√¨ sao n√≥i d√¢n ch·ªß l√† m·ªôt ph·∫°m tr√π l·ªãch s·ª≠?",
    color: "unity-purple",
    unlocked: false,
    questions: questionsData[3],
    blogId: "cq-3",
  },
  {
    id: 4,
    title: "M·∫£nh Gh√©p Ch·ªß ƒê·ªÅ CQ4. S·ª± kh√°c nhau v·ªÅ b·∫£n ch·∫•t gi·ªØa d√¢n ch·ªß XHCN v√† d√¢n ch·ªß t∆∞ s·∫£n qua v√≠ d·ª• th·ª±c ti·ªÖn",
    description:
      "Th√¥ng qua nh·ªØng v√≠ d·ª• th·ª±c ti·ªÖn ƒë·ªÉ ch·ª©ng minh s·ª± kh√°c nhau v·ªÅ b·∫£n ch·∫•t gi≈©a d√¢n ch·ªß x√£ h·ªôi ch·ªß nghƒ©a v√† d√¢n ch·ªß t∆∞ s·∫£n?",
    color: "progress-green",
    unlocked: false,
    questions: questionsData[4],
    blogId: "cq-4",
  },
];

const initialProgress: UserProgress = {
  unlockedPieces: [],
  totalTime: 0,
  cheatModeEnabled: false,
  pieceUnlockTimes: {},
  questionsAnswered: 0,
  correctAnswers: 0,
  streakCount: 0,
  achievements: [],
};

const achievementDefinitions: Omit<Achievement, "unlockedAt">[] = [
  {
    id: "first-unlock",
    title: "Kh·ªüi ƒê·∫ßu",
    description: "M·ªü kh√≥a m·∫£nh gh√©p ƒë·∫ßu ti√™n",
    icon: "üéØ",
    type: "completion",
  },
  {
    id: "half-complete",
    title: "N·ª≠a Ch·∫∑ng ƒê∆∞·ªùng",
    description: "M·ªü kh√≥a 2 m·∫£nh gh√©p",
    icon: "‚ö°",
    type: "completion",
  },
  {
    id: "almost-there",
    title: "G·∫ßn ƒê√≠ch",
    description: "M·ªü kh√≥a 3 m·∫£nh gh√©p",
    icon: "üî•",
    type: "completion",
  },
  {
    id: "master",
    title: "B·∫≠c Th·∫ßy",
    description: "Ho√†n th√†nh t·∫•t c·∫£ 4 m·∫£nh gh√©p",
    icon: "üëë",
    type: "completion",
  },
  {
    id: "speed-demon",
    title: "T·ªëc ƒê·ªô √Ånh S√°ng",
    description: "Ho√†n th√†nh trong v√≤ng 5 ph√∫t",
    icon: "‚ö°",
    type: "speed",
  },
  {
    id: "perfectionist",
    title: "Ho√†n H·∫£o",
    description: "Tr·∫£ l·ªùi ƒë√∫ng t·∫•t c·∫£ c√¢u h·ªèi",
    icon: "üíé",
    type: "accuracy",
  },
  {
    id: "explorer",
    title: "Nh√† Kh√°m Ph√°",
    description: "ƒê·ªçc t·∫•t c·∫£ b√†i blog",
    icon: "üó∫Ô∏è",
    type: "exploration",
  },
];

export function PuzzleProvider({ children }: { children: React.ReactNode }) {
  const [pieces, setPieces] = useState<PuzzlePiece[]>(initialPieces);
  const [userProgress, setUserProgress] =
    useState<UserProgress>(initialProgress);
  const [sessionStartTime, setSessionStartTime] = useState<Date | null>(null);

  useEffect(() => {
    const saved = localStorage.getItem("socialist-education-progress");
    if (saved) {
      const progress = JSON.parse(saved);
      setUserProgress(progress);

      setPieces((prev) =>
        prev.map((piece) => ({
          ...piece,
          unlocked:
            progress.unlockedPieces.includes(piece.id) ||
            progress.cheatModeEnabled,
        }))
      );
    }
  }, []);

  useEffect(() => {
    localStorage.setItem(
      "socialist-education-progress",
      JSON.stringify(userProgress)
    );
  }, [userProgress]);

  const unlockPiece = (pieceId: number) => {
    if (!userProgress.unlockedPieces.includes(pieceId)) {
      const now = new Date();
      const newProgress = {
        ...userProgress,
        unlockedPieces: [...userProgress.unlockedPieces, pieceId],
        pieceUnlockTimes: {
          ...userProgress.pieceUnlockTimes,
          [pieceId]: now,
        },
      };

      if (newProgress.unlockedPieces.length === 4) {
        newProgress.completedAt = now;

        if (sessionStartTime) {
          newProgress.totalTime = Math.floor(
            (now.getTime() - sessionStartTime.getTime()) / 1000
          );
        }
      }

      const newAchievements = checkAchievements(newProgress);
      newProgress.achievements = [
        ...userProgress.achievements,
        ...newAchievements,
      ];

      setUserProgress(newProgress);
      setPieces((prev) =>
        prev.map((piece) =>
          piece.id === pieceId ? { ...piece, unlocked: true } : piece
        )
      );
    }
  };

  const checkAchievements = (progress: UserProgress): Achievement[] => {
    const newAchievements: Achievement[] = [];
    const existingIds = progress.achievements.map((a) => a.id);

    achievementDefinitions.forEach((def) => {
      if (existingIds.includes(def.id)) return;

      let shouldUnlock = false;

      switch (def.id) {
        case "first-unlock":
          shouldUnlock = progress.unlockedPieces.length >= 1;
          break;
        case "half-complete":
          shouldUnlock = progress.unlockedPieces.length >= 2;
          break;
        case "almost-there":
          shouldUnlock = progress.unlockedPieces.length >= 3;
          break;
        case "master":
          shouldUnlock = progress.unlockedPieces.length >= 4;
          break;
        case "speed-demon":
          shouldUnlock =
            progress.totalTime > 0 &&
            progress.totalTime <= 300 &&
            progress.unlockedPieces.length === 4;
          break;
        case "perfectionist":
          shouldUnlock =
            progress.questionsAnswered > 0 &&
            progress.correctAnswers === progress.questionsAnswered;
          break;
      }

      if (shouldUnlock) {
        newAchievements.push({
          ...def,
          unlockedAt: new Date(),
        });
      }
    });

    return newAchievements;
  };

  const trackQuestionAnswer = (isCorrect: boolean) => {
    setUserProgress((prev) => ({
      ...prev,
      questionsAnswered: prev.questionsAnswered + 1,
      correctAnswers: prev.correctAnswers + (isCorrect ? 1 : 0),
      streakCount: isCorrect ? prev.streakCount + 1 : 0,
    }));
  };

  useEffect(() => {
    if (
      !sessionStartTime &&
      userProgress.unlockedPieces.length === 0 &&
      !userProgress.cheatModeEnabled
    ) {
      setSessionStartTime(new Date());
    }
  }, [
    sessionStartTime,
    userProgress.unlockedPieces.length,
    userProgress.cheatModeEnabled,
  ]);

  const toggleCheatMode = () => {
    const newCheatMode = !userProgress.cheatModeEnabled;
    setUserProgress((prev) => ({ ...prev, cheatModeEnabled: newCheatMode }));
    setPieces((prev) =>
      prev.map((piece) => ({
        ...piece,
        unlocked:
          newCheatMode || userProgress.unlockedPieces.includes(piece.id),
      }))
    );
  };

  const resetProgress = () => {
    const resetProgress = initialProgress;
    setUserProgress(resetProgress);
    setPieces(initialPieces);
    setSessionStartTime(null);
    localStorage.removeItem("socialist-education-progress");
  };

  const isAllUnlocked =
    userProgress.unlockedPieces.length === 4 || userProgress.cheatModeEnabled;

  return (
    <PuzzleContext.Provider
      value={{
        pieces,
        userProgress,
        unlockPiece,
        toggleCheatMode,
        resetProgress,
        isAllUnlocked,
        trackQuestionAnswer,
        sessionStartTime,
      }}
    >
      {children}
    </PuzzleContext.Provider>
  );
}

export function usePuzzle() {
  const context = useContext(PuzzleContext);
  if (context === undefined) {
    throw new Error("usePuzzle must be used within a PuzzleProvider");
  }
  return context;
}
